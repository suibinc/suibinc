return function createBundleRenderer(
    bundle,
    rendererOptions
) {
    if (rendererOptions === void 0) rendererOptions = {};

    var files, entry, maps;
    var basedir = rendererOptions.basedir;

    // load bundle if given filepath
    if (
        typeof bundle === 'string' && /\.js(on)?$/.test(bundle) &&
        path$1.isAbsolute(bundle)
    ) {
        if (fs.existsSync(bundle)) {
            var isJSON = /\.json$/.test(bundle);
            basedir = basedir || path$1.dirname(bundle);
            bundle = fs.readFileSync(bundle, 'utf-8');
            if (isJSON) {
                try {
                    bundle = JSON.parse(bundle);
                } catch (e) {
                    throw new Error(("Invalid JSON bundle file: " + bundle))
                }
            }
        } else {
            throw new Error(("Cannot locate bundle file: " + bundle))
        }
    }

    if (typeof bundle === 'object') {
        entry = bundle.entry;
        files = bundle.files;
        basedir = basedir || bundle.basedir;
        maps = createSourceMapConsumers(bundle.maps);
        if (typeof entry !== 'string' || typeof files !== 'object') {
            throw new Error(INVALID_MSG)
        }
    } else if (typeof bundle === 'string') {
        entry = '__vue_ssr_bundle__';
        files = { '__vue_ssr_bundle__': bundle };
        maps = {};
    } else {
        throw new Error(INVALID_MSG)
    }

    var renderer = createRenderer(rendererOptions);

    var run = createBundleRunner(
        entry,
        files,
        basedir,
        rendererOptions.runInNewContext
    );
    return {
        renderToString: function (context, cb) {
            if (typeof context === 'function') {
                cb = context;
                context = {};
            }
            run(context).catch(function (err) {
                rewriteErrorTrace(err, maps);
                cb(err);
            }).then(function (app) {
                if (app) {
                    renderer.renderToString(app, context, function (err, res) {
                        rewriteErrorTrace(err, maps);
                        cb(err, res);
                    });
                }
            });
        },

        renderToStream: function (context) {
            var res = new PassThrough();
            run(context).catch(function (err) {
                rewriteErrorTrace(err, maps);
                // avoid emitting synchronously before user can
                // attach error listener
                process.nextTick(function () {
                    res.emit('error', err);
                });
            }).then(function (app) {
                if (app) {
                    var renderStream = renderer.renderToStream(app, context);

                    renderStream.on('error', function (err) {
                        rewriteErrorTrace(err, maps);
                        res.emit('error', err);
                    });

                    // relay HTMLStream special events
                    if (rendererOptions && rendererOptions.template) {
                        renderStream.on('beforeStart', function () {
                            res.emit('beforeStart');
                        });
                        renderStream.on('beforeEnd', function () {
                            res.emit('beforeEnd');
                        });
                    }

                    renderStream.pipe(res);
                }
            });

            return res
        }
    }
}
